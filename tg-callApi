

/*
    Handle request dan respon API Telegram
    biasa disebut sebagai API Telegram Client

    Otomatisasi params bertipe JSON dan Blob
    tidak ada lagi pemisahan request dan requestForm
*/

const token = "ISI_TOKEN_DISINI"
const verbose = true

// tipe data yang wajib bertipe JSON
const FORM_DATA_JSON_FIELDS = [
  'results',
  'reply_markup',
  'mask_position',
  'shipping_options'
];

// tipe yang berpotensi memiliki data bertipe blob
// dikarenakan GAS tidak bisa mendeteksi secara langsung tipe blob
// sehingga dibuat perkiraan field
// --> sudah ditemukan, tapi males ngubah codingan
// --> https://stackoverflow.com/questions/68665661/google-apps-script-how-detect-typeof-blob
const BLOB_FIELDS = [
  'thumb',
  'photo',
  'audio',
  'document',
  'video',
  'animation',
  'video_note',
  'sticker',
  'png_sticker',
  'tgs_sticker',
  'certificate',

];

// tg sebagai object untuk memanggil API Telegram

const tg = {

  callApi: function (method, data = {}) {
    if (!token) {
      throw new Error('Bot Token is required')
    }
    if (!method) {
      throw new Error('Method is required')
    }

    try {
      let options = maybeBlob(data)
        ? tg.buildFormData(data)
        : tg.buildJSON(data);

      let response = UrlFetchApp.fetch(`https://api.telegram.org/bot${token}/${method}`, options);
      if (response.getResponseCode() == 200) {
        let result = JSON.parse(response.getContentText());
        if (verbose) {
          Logger.log(method + ' Result:')
          Logger.log(helper.json(result));
        }
        return result;
      }
    } catch (error) {
      throw Error(error.message);
    }

  },

  buildJSON: function (payload) {
    payload = JSON.stringify(payload, tg.replacer);
    if (verbose) Logger.log('build json: ' + payload);
    return {
      method: 'POST',
      contentType: 'application/json',
      payload
    };
  },

  buildFormData: function (payload) {
    if (verbose) Logger.log('build form');
    for (const field of FORM_DATA_JSON_FIELDS) {
      if (helper.hasProp(payload, field) && typeof payload[field] !== 'string') {
        payload[field] = JSON.stringify(payload[field]);
      }
    }

    Object.keys(payload).forEach(key => {
      if (typeof payload[key] == 'number') payload[key] = String(payload[key]);
    })

    if (verbose) Logger.log(JSON.stringify(payload));

    return {
      method: 'post',
      payload
    };
  },

  replacer: function (_, value) {
    if (value == null)
      return undefined;
    return value;
  }
}

// saat ini: pakai metode yang ini
// meprediksi isinya blob atau bukan
function maybeBlob(payload) {
  if (!payload) return false;
  let result = false;
  for (const field of BLOB_FIELDS)
    if (helper.hasProp(payload, field))
      if (!helper.isIn(['string', 'number'], helper.typeCheck(payload[field]))) result = true;

  return result;
}

// Helper digunakan sebagai bantuan

const helper = {

  hasProp: function (obj, prop) {
    return obj && prop in obj;
  },

  hasPropType: function (obj, prop, type) {
    // eslint-disable-next-line valid-typeof
    return hasProp(obj, prop) && type === typeof obj[prop];
  },

  typeCheck: function (value) {
    const return_value = Object.prototype.toString.call(value);
    // we can also use regex to do this...
    const type = return_value.substring(
      return_value.indexOf(" ") + 1,
      return_value.indexOf("]"));

    return type.toLowerCase();
  },

  isIn: function (array, index) {
    if (helper.typeCheck(array) !== "array") throw new ReferenceError("ðŸš« No array detected!")
    return (array.indexOf(index) > -1);
  },

  outToJSON: function (data, spasi = 2) {
    return JSON.stringify(data, null, spasi);
  },

  // alias outToJSON
  json: function (...args) {
    return helper.outToJSON(...args);
  },

  stringify: function (data) {
    return JSON.stringify(data);
  },

  parse: function (data) {
    return JSON.parse(data);
  }
}
